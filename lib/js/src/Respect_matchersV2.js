// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block         = require("bs-platform/lib/js/block.js");
var Curry         = require("bs-platform/lib/js/curry.js");
var Caml_obj      = require("bs-platform/lib/js/caml_obj.js");
var Respect_async = require("./Respect_async.js");

function matchSuccess(x) {
  var partial_arg = /* MatchSuccess */Block.__(0, [x]);
  return (function (param) {
      return Respect_async.$$return(partial_arg, param);
    });
}

function matchFailure(x) {
  var partial_arg = /* MatchFailure */Block.__(1, [x]);
  return (function (param) {
      return Respect_async.$$return(partial_arg, param);
    });
}

function createCallback(don, param) {
  if (param.tag) {
    return Curry._2(don, /* Some */["Match error"], /* () */0);
  } else {
    return Curry._2(don, /* None */0, /* () */0);
  }
}

function expect(actual) {
  return /* record */[/* to_ */(function (matcher, don) {
              return Respect_async.run(/* Some */[(function () {
                              return Curry._2(don, /* Some */["Exception occurred"], /* () */0);
                            })], (function (param) {
                            return createCallback(don, param);
                          }), Curry._1(matcher[/* f */0], actual));
            })];
}

function create(f, desc) {
  return /* record */[
          /* f */f,
          /* description */desc
        ];
}

function createPred(f, desc) {
  return /* record */[
          /* f */(function (actual) {
              var match = Curry._1(f, actual);
              if (match !== 0) {
                var partial_arg = /* MatchSuccess */Block.__(0, [actual]);
                return (function (param) {
                    return Respect_async.$$return(partial_arg, param);
                  });
              } else {
                var partial_arg$1 = /* MatchFailure */Block.__(1, [actual]);
                return (function (param) {
                    return Respect_async.$$return(partial_arg$1, param);
                  });
              }
            }),
          /* description */desc
        ];
}

function equal(exp) {
  return createPred((function (actual) {
                return Caml_obj.caml_equal(actual, exp);
              }), "equal " + exp.toString());
}

function Make(T) {
  var equal = function (exp) {
    return createPred((function (actual) {
                  return +(Curry._2(T[/* compare */1], actual, exp) === 0);
                }), "equal to " + Curry._1(T[/* to_string */0], exp));
  };
  var greaterThan = function (exp) {
    return createPred((function (actual) {
                  return +(Curry._2(T[/* compare */1], actual, exp) > 0);
                }), "greater than " + Curry._1(T[/* to_string */0], exp));
  };
  var lessThan = function (exp) {
    return createPred((function (actual) {
                  return +(Curry._2(T[/* compare */1], actual, exp) < 0);
                }), "greater than " + Curry._1(T[/* to_string */0], exp));
  };
  return /* module */[
          /* equal */equal,
          /* greaterThan */greaterThan,
          /* lessThan */lessThan
        ];
}

function resolve_000(actual, param) {
  var cb = param[0];
  return Respect_async.run(/* Some */[(function (x) {
                  return Curry._1(cb, /* MatchFailure */Block.__(1, [x]));
                })], (function (x) {
                return Curry._1(cb, /* MatchSuccess */Block.__(0, [x]));
              }), actual);
}

var resolve = /* record */[
  resolve_000,
  /* description */"resolve"
];

var AsyncMatchers = /* module */[/* resolve */resolve];

var Async = 0;

exports.Async          = Async;
exports.matchSuccess   = matchSuccess;
exports.matchFailure   = matchFailure;
exports.createCallback = createCallback;
exports.expect         = expect;
exports.create         = create;
exports.createPred     = createPred;
exports.equal          = equal;
exports.Make           = Make;
exports.AsyncMatchers  = AsyncMatchers;
/* No side effect */
