// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block          = require("bs-platform/lib/js/block.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var Caml_obj       = require("bs-platform/lib/js/caml_obj.js");
var Respect_async  = require("./Respect_async.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

function matchSuccess(x) {
  var partial_arg = /* MatchSuccess */Block.__(0, [x]);
  return (function (param) {
      return Respect_async.$$return(partial_arg, param);
    });
}

function matchFailure(x) {
  var partial_arg = /* MatchFailure */Block.__(1, [x]);
  return (function (param) {
      return Respect_async.$$return(partial_arg, param);
    });
}

function createCallback(don, param) {
  if (param.tag) {
    return Curry._2(don, /* Some */["Match error"], /* () */0);
  } else {
    return Curry._2(don, /* None */0, /* () */0);
  }
}

var class_tables = [
  0,
  0,
  0
];

function expect(actual) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(["to_"]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, [
          "to_",
          "actual"
        ]);
    var to_ = ids[0];
    var actual$1 = ids[1];
    CamlinternalOO.set_methods($$class, /* array */[
          actual$1,
          (function (self$1) {
              return self$1[env][0];
            }),
          to_,
          (function (self$1, matcher, don) {
              return Respect_async.run(/* Some */[(function () {
                              return Curry._2(don, /* Some */["Exception occurred"], /* () */0);
                            })], (function (param) {
                            return createCallback(don, param);
                          }), Curry._1(matcher[/* f */0], Curry._1(self$1[0][actual$1], self$1)));
            })
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [actual]);
}

function createPred(f, desc) {
  return /* record */[
          /* f */(function (actual) {
              var match = Curry._1(f, actual);
              if (match !== 0) {
                var partial_arg = /* MatchSuccess */Block.__(0, [actual]);
                return (function (param) {
                    return Respect_async.$$return(partial_arg, param);
                  });
              } else {
                var partial_arg$1 = /* MatchFailure */Block.__(1, [actual]);
                return (function (param) {
                    return Respect_async.$$return(partial_arg$1, param);
                  });
              }
            }),
          /* description */desc
        ];
}

function equal(exp) {
  return createPred((function (actual) {
                return Caml_obj.caml_equal(actual, exp);
              }), "equal " + exp.toString());
}

function Make(T) {
  var equal = function (exp) {
    return createPred((function (actual) {
                  return +(Curry._2(T[/* compare */1], actual, exp) === 0);
                }), "equal to " + Curry._1(T[/* to_string */0], exp));
  };
  var greaterThan = function (exp) {
    return createPred((function (actual) {
                  return +(Curry._2(T[/* compare */1], actual, exp) > 0);
                }), "greater than " + Curry._1(T[/* to_string */0], exp));
  };
  var lessThan = function (exp) {
    return createPred((function (actual) {
                  return +(Curry._2(T[/* compare */1], actual, exp) < 0);
                }), "greater than " + Curry._1(T[/* to_string */0], exp));
  };
  return /* module */[
          /* equal */equal,
          /* greaterThan */greaterThan,
          /* lessThan */lessThan
        ];
}

var Async = 0;

exports.Async          = Async;
exports.matchSuccess   = matchSuccess;
exports.matchFailure   = matchFailure;
exports.createCallback = createCallback;
exports.expect         = expect;
exports.createPred     = createPred;
exports.equal          = equal;
exports.Make           = Make;
/* No side effect */
