// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry              = require("bs-platform/lib/js/curry.js");
var Int64              = require("bs-platform/lib/js/int64.js");
var $$String           = require("bs-platform/lib/js/string.js");
var Respect            = require("../src/Respect.js");
var Caml_int64         = require("bs-platform/lib/js/caml_int64.js");
var TestHelpers        = require("./TestHelpers.js");
var Respect_matchersV2 = require("../src/Respect_matchersV2.js");

function to_string(prim) {
  return prim.toString();
}

function compare(a, b) {
  return Int64.compare(Caml_int64.of_int32(a), Caml_int64.of_int32(b));
}

var Int = /* module */[
  /* to_string */to_string,
  /* compare */compare
];

function to_string$1(x) {
  return x;
}

var $$String$1 = /* module */[
  /* make */$$String.make,
  /* init */$$String.init,
  /* copy */$$String.copy,
  /* sub */$$String.sub,
  /* fill */$$String.fill,
  /* blit */$$String.blit,
  /* concat */$$String.concat,
  /* iter */$$String.iter,
  /* iteri */$$String.iteri,
  /* map */$$String.map,
  /* mapi */$$String.mapi,
  /* trim */$$String.trim,
  /* escaped */$$String.escaped,
  /* index */$$String.index,
  /* rindex */$$String.rindex,
  /* index_from */$$String.index_from,
  /* rindex_from */$$String.rindex_from,
  /* contains */$$String.contains,
  /* contains_from */$$String.contains_from,
  /* rcontains_from */$$String.rcontains_from,
  /* uppercase */$$String.uppercase,
  /* lowercase */$$String.lowercase,
  /* capitalize */$$String.capitalize,
  /* uncapitalize */$$String.uncapitalize,
  /* compare */$$String.compare,
  /* to_string */to_string$1
];

var IntMatchers = Respect_matchersV2.Make(Int);

var StrMatchers = Respect_matchersV2.Make([
      to_string$1,
      $$String.compare
    ]);

Curry._1(Respect.Dsl[/* Async */12][/* register */3], Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "MatchersV2", /* :: */[
          Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "equal", /* :: */[
                Curry._2(Respect.Dsl[/* Async */12][/* it */1], "matches when args are equal", (function () {
                        var partial_arg = Curry._1(Respect_matchersV2.expect(5)[/* to_ */0], Respect_matchersV2.equal(5));
                        var partial_arg$1 = TestHelpers.MatchHelper[/* shouldMatch */0];
                        return (function (param) {
                            return partial_arg$1(partial_arg, param);
                          });
                      })),
                /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "fails when args are not equal", (function () {
                          var partial_arg = Curry._1(Respect_matchersV2.expect(5)[/* to_ */0], Curry._1(IntMatchers[/* equal */0], 6));
                          var partial_arg$1 = TestHelpers.MatchHelper[/* shouldNotMatch */1];
                          return (function (param) {
                              return partial_arg$1(partial_arg, param);
                            });
                        })),
                  /* [] */0
                ]
              ]),
          /* :: */[
            Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Description", /* :: */[
                  Curry._2(Respect.Dsl[/* Async */12][/* it */1], "is nice", (function () {
                          var matcher = Curry._1(IntMatchers[/* equal */0], 42);
                          return Curry._1(Respect_matchersV2.expect(matcher[/* description */1])[/* to_ */0], Curry._1(StrMatchers[/* equal */0], "equal to 42"));
                        })),
                  /* [] */0
                ]),
            /* [] */0
          ]
        ]));

exports.Int         = Int;
exports.$$String    = $$String$1;
exports.IntMatchers = IntMatchers;
exports.StrMatchers = StrMatchers;
/* IntMatchers Not a pure module */
